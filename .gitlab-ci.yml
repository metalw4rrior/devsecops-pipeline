stages:
  - build
  - test
  - sast_sonar
  - scan_safety
  - scan_bandit
  - deploy

variables:
  KUBERNETES_API_URL: "${KUBERNETES_API_URL}"
  KUBERNETES_TOKEN: "${KUBERNETES_TOKEN}"
  KUBERNETES_NAMESPACE: "${KUBERNETES_NAMESPACE}"
  KUBERNETES_CA_CERT: "${KUBERNETES_CA_CERT}"
  KUBERNETES_CLIENT_CERT: "${KUBERNETES_CLIENT_CERT}"
  KUBERNETES_CLIENT_KEY: "${KUBERNETES_CLIENT_KEY}"
  DOCKER_USER: "${DOCKER_USER}"
  DOCKER_PASSWORD: "${DOCKER_PASSWORD}"
  DOCKER_SOCK: "unix:///var/run/docker.sock"
  DOCKER_HOST: "${DOCKER_HOST}"
  DOCKER_IMAGE: "${DOCKER_IMAGE}"


build:
  stage: build
  image: $DOCKER_HOST/docker:latest
  script:
    - docker info
    - docker build -t $DOCKER_IMAGE app/
    - echo $REGISTRY_PASS | docker login -u $REGISTRY_LOGIN --password-stdin $DOCKER_HOST
    - docker push $DOCKER_IMAGE
  except:
    - tags
  only:
    - test


test:
  stage: test
  image: $DOCKER_HOST/python:3.9
  script:
    - python -m unittest discover app/
  except:
    - tags
  only:
    - test

scan_safety:
  stage: scan_safety
  image: $DOCKER_HOST/python:3.9
  script:
    - pip install safety
    - pip install -r app/src/requirements.txt
    - safety check -r app/src/requirements.txt 
  except:
    - tags
  only:
    - test
  allow_failure: true

scan_bandit:
  stage: scan_bandit
  image: $DOCKER_HOST/python:3.9
  script:
    - pip install bandit
    - bandit -r app/  
  except:
    - tags

  only:
    - test

sast_sonar:
  stage: sast_sonar
  image:
    name: $DOCKER_HOST/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  except:
    - tags
  only:
    - test
  allow_failure: true


deploy_job:
  stage: deploy
  tags:
    - kubernetes
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  script:
    - echo "$KUBERNETES_CA_CERT" > ca.crt
    - echo "$KUBERNETES_CLIENT_CERT" > gitlab-sa.crt
    - echo "$KUBERNETES_CLIENT_KEY" > gitlab-sa.key
    - export KUBECONFIG=$(pwd)/kubeconfig.yaml
    - kubectl get nodes
    - kubectl apply -f your_manifest.yaml
    - kubectl set image deployment/your_deployment your_app=your_registry
    - kubectl rollout restart deployment/your_deployment -n testing












